{"version":3,"sources":["components/Button.tsx","styles.ts","components/Grid.tsx","components/Images.tsx","components/DropZone.tsx","utils/table.ts","components/HowTo.tsx","components/Input.tsx","utils/parsing.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledButton","styled","button","Button","children","handleClick","onClick","device","margin","phone","tablet","BASE","desktop","phoneHalf","tabletHalf","desktopHalf","phoneQuarter","tabletQuarter","desktopQuarter","Row","div","Col","ColSpacer","ColSpacerMini","ImagesContainer","StyledImg","img","Images","images","map","imageName","url","alt","src","id","ADD_BEFORE_IMG","ADD_AFTER_IMG","StyledCell","Cell","name","action","dispatch","defaultDrag","e","preventDefault","stopPropagation","onDrop","type","imgSrc","dataTransfer","getData","handleDrop","onDragOver","onDragEnter","onDragLeave","dummyCellData","Mobile","beforeImg","afterImg","Tablet","Desktop","reducer","state","DropZone","onButtonClick","useReducer","data","Object","keys","header","width","getWidth","reduce","output","row","createMarkdownTable","DropTable","i","key","Paragraph","p","HowTo","TextArea","textarea","StyledContainer","Input","onChange","placeholder","readOnly","value","getTextInFinalParentheses","item","slice","lastIndexOf","BodyContainer","App","useState","setImages","setOutput","className","inputText","textInput","split","text","trim","filter","indexOf","extractNamesAndUrls","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca0e4765.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  padding: 0.35em 1.2em;\n  border: 0.1em solid #000000;\n  border-radius: 0.12em;\n  box-sizing: border-box;\n  text-align: center;\n  transition: all 0.2s;\n  width: 100%;\n  font-size: inherit;\n  font-family: inherit;\n\n  :hover {\n    color: #000000;\n    background-color: #ffffff;\n  }\n`;\n\nexport const Button = ({ children, handleClick }) => (\n  <StyledButton onClick={handleClick}>{children}</StyledButton>\n);\n","const BASE = 8;\n\nexport const device = {\n  forPhoneOnly: '(max-width: 599px)',\n  forTabletPortraitUp: '(min-width: 600px)',\n  forTabletLandscapeUp: '(min-width: 900px)',\n  forDesktopUp: '(min-width: 1200px)',\n  forBigDesktopUp: '(min-width: 1800px)',\n};\n\nexport const margin = {\n  phone: `${BASE}px`,\n  tablet: `${BASE * 2}px`,\n  desktop: `${BASE * 3}px`,\n  phoneHalf: `${BASE / 2}px`,\n  tabletHalf: `${(BASE / 2) * 2}px`,\n  desktopHalf: `${(BASE / 2) * 3}px`,\n  phoneQuarter: `${BASE / 4}px`,\n  tabletQuarter: `${(BASE / 4) * 2}px`,\n  desktopQuarter: `${(BASE / 4) * 3}px`,\n};\n","import styled from 'styled-components';\nimport { device, margin } from '../styles';\n\nexport const Row = styled.div`\n  display: flex;\n  padding: ${margin.phoneHalf} 0;\n\n  @media ${device.forTabletPortraitUp} {\n    padding: ${margin.tabletHalf} 0;\n  }\n\n  @media ${device.forDesktopUp} {\n    padding: ${margin.desktopHalf} 0;\n  }\n`;\n\nexport const Col = styled.div`\n  flex: 1;\n`;\n\nexport const ColSpacer = styled.div`\n  flex: 0;\n  padding: ${margin.phoneHalf};\n\n  @media ${device.forTabletPortraitUp} {\n    padding: ${margin.tabletHalf};\n  }\n\n  @media ${device.forDesktopUp} {\n    padding: ${margin.desktopHalf};\n  }\n`;\n\nexport const ColSpacerMini = styled.div`\n  flex: 0;\n  padding: ${margin.phoneQuarter};\n\n  @media ${device.forTabletPortraitUp} {\n    padding: ${margin.tabletQuarter};\n  }\n\n  @media ${device.forDesktopUp} {\n    padding: ${margin.desktopQuarter};\n  }\n`;\n","import { ImageData } from '../utils/parsing';\nimport styled from 'styled-components';\n\ntype Props = {\n  images: ImageData[];\n};\n\nconst ImagesContainer = styled.div`\n  text-align: center;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst StyledImg = styled.img`\n  margin: 16px;\n  max-height: 30vh;\n  vertical-align: bottom;\n`;\n\nexport const Images = ({ images }: Props) => {\n  return (\n    <ImagesContainer>\n      {images.map(({ imageName, url }) => (\n        <StyledImg key={url} alt={imageName} src={url} id={url} />\n      ))}\n    </ImagesContainer>\n  );\n};\n","import { Dispatch, SetStateAction, useReducer } from 'react';\nimport styled from 'styled-components';\nimport { ImageData } from '../utils/parsing';\nimport { createMarkdownTable } from '../utils/table';\nimport { Button } from './Button';\nimport { Col, Row, ColSpacer, ColSpacerMini } from './Grid';\nimport { Images } from './Images';\n\nconst ADD_BEFORE_IMG = 'ADD_BEFORE_IMG';\nconst ADD_AFTER_IMG = 'ADD_AFTER_IMG';\n\nconst StyledCell = styled.div`\n  font-size: inherit;\n  font-family: inherit;\n\n  flex: 1;\n  width: 100%;\n\n  border: 0.1em solid #000000;\n  border-radius: 0.12em;\n`;\n\nconst StyledImg = styled.img`\n  box-sizing: border-box;\n  max-width: 100%;\n  vertical-align: bottom;\n`;\n\ntype CellProps = {\n  name: string;\n  action?: string;\n  dispatch?: React.Dispatch<any>;\n  children: JSX.Element[] | JSX.Element;\n};\n\ntype Drag = React.DragEvent<HTMLDivElement>;\n\nconst Cell = ({ name, action, dispatch, children }: CellProps) => {\n  const defaultDrag = (e: Drag) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDrop = (e: Drag) => {\n    e.preventDefault();\n    dispatch &&\n      dispatch({\n        type: action,\n        name,\n        imgSrc: e.dataTransfer.getData('text/uri-list'),\n      });\n    e.stopPropagation();\n  };\n\n  return (\n    <StyledCell\n      onDrop={(e: Drag) => handleDrop(e)}\n      onDragOver={(e: Drag) => defaultDrag(e)}\n      onDragEnter={(e: Drag) => defaultDrag(e)}\n      onDragLeave={(e: Drag) => defaultDrag(e)}\n    >\n      {children}\n    </StyledCell>\n  );\n};\n\nconst dummyCellData = {\n  Mobile: { beforeImg: '', afterImg: '' },\n  Tablet: { beforeImg: '', afterImg: '' },\n  Desktop: { beforeImg: '', afterImg: '' },\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ADD_BEFORE_IMG:\n      return {\n        ...state,\n        [action.name]: { ...state[action.name], beforeImg: action.imgSrc },\n      };\n    case ADD_AFTER_IMG:\n      return {\n        ...state,\n        [action.name]: { ...state[action.name], afterImg: action.imgSrc },\n      };\n    default:\n      return state;\n  }\n};\n\ntype Props = {\n  onButtonClick: Dispatch<SetStateAction<string>>;\n  images: ImageData[];\n};\n\nexport const DropZone = ({ onButtonClick, images }: Props) => {\n  const [data, dispatch] = useReducer(reducer, dummyCellData);\n\n  return (\n    <>\n      <Row>\n        <Col>\n          <Button handleClick={() => onButtonClick(createMarkdownTable(data))}>\n            Export Markdown\n          </Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Images images={images} />\n        </Col>\n        <ColSpacer />\n        <Col>\n          <DropTable data={data} dispatch={dispatch} />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport const DropTable = ({ data, dispatch }) => {\n  const headerRow = ['Device', 'Before', 'After'];\n\n  return (\n    <>\n      <Row>\n        {headerRow.map((name, i) => (\n          <>\n            {i !== 0 && <ColSpacerMini />}\n            <Cell name={name}>\n              <strong>{name}</strong>\n            </Cell>\n          </>\n        ))}\n      </Row>\n      {Object.keys(data).map((key) => {\n        const { beforeImg, afterImg } = data[key];\n        return (\n          <Row key={key}>\n            <Cell name={key}>\n              <p>{key}</p>\n            </Cell>\n            <ColSpacerMini />\n            <Cell name={key} dispatch={dispatch} action={ADD_BEFORE_IMG}>\n              <StyledImg key={beforeImg} src={beforeImg} id={beforeImg} />\n            </Cell>\n            <ColSpacerMini />\n            <Cell name={key} dispatch={dispatch} action={ADD_AFTER_IMG}>\n              <StyledImg key={afterImg} src={afterImg} id={afterImg} />\n            </Cell>\n          </Row>\n        );\n      })}\n    </>\n  );\n};\n","const HEADER_ROWS = `|Device|Before|After|\\n|---|---|---|`;\n\nconst getWidth = (device: string) => {\n  switch (device) {\n    case 'Mobile':\n      return 250;\n    default:\n      return 325;\n  }\n};\n\nexport const createMarkdownTable = (data: {}) => {\n  const rowHeaders = Object.keys(data);\n  const test = rowHeaders.map((header) => {\n    const { beforeImg, afterImg } = data[header];\n    const width = getWidth(header);\n    return `|${header}|<img src=\"${beforeImg}\" width=\"${width}\" />|<img src=\"${afterImg}\" width=\"${width}\" />|`;\n  });\n  const output = test.reduce((output, row) => output + `\\n` + row, HEADER_ROWS);\n\n  return output;\n};\n","import styled from 'styled-components';\n\nconst Paragraph = styled.p`\n  text-align: left;\n`;\n\nexport const HowTo = () => (\n  <Paragraph>\n    How to add images in the tool:\n    <ol>\n      <li>To begin, open a pull request in Github, or edit a Markdown file.</li>\n      <li>\n        In the description of the pull request, drag and drop your images into\n        the text area.\n        <ul>\n          <li>This will generate Markdown links to the images.</li>\n          <li>\n            Each will look similar to this:\n            <ul>\n              <li>\n                <code>\n                  ![googlelogo_color_272x92dp](https://user-images.githubusercontent.com/26528097/127917455-f91173aa-e5f3-4a2f-aa26-b480b4c13b50.png)\n                </code>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li>\n        Copy this list of images and paste them into the left text box on this\n        tool.\n      </li>\n      <li>\n        After the images have appeared on the left, drag and drop them into the\n        appropriate spots in the table.\n      </li>\n      <li>When finished, click the Export Markdown button.</li>\n      <li>\n        Copy all of the text in the right text box, and paste it into your PR.\n      </li>\n      <li>\n        To confirm the appearance of your table, click the Preview tab on\n        Github.\n      </li>\n    </ol>\n  </Paragraph>\n);\n","import styled from 'styled-components';\n\nconst TextArea = styled.textarea`\n  font-size: inherit;\n  font-family: inherit;\n  width: 100%;\n  padding: 0.35em 1.2em;\n  border: 0.1em solid #000000;\n  border-radius: 0.12em;\n`;\n\nconst StyledContainer = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\ntype Props = {\n  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  placeholder?: string;\n  readOnly?: boolean;\n  value?: string;\n};\n\nexport const Input = ({\n  onChange,\n  placeholder = '',\n  readOnly = false,\n  value,\n}: Props) => {\n  return (\n    <StyledContainer>\n      <TextArea\n        placeholder={placeholder}\n        onChange={onChange}\n        value={value}\n        readOnly={readOnly}\n      />\n    </StyledContainer>\n  );\n};\n","export type ImageData = {\n  imageName: string;\n  url: string;\n};\n\nconst getArrayOfMarkdownLinks = (textInput: string) =>\n  textInput\n    .split('!')\n    .map((text) => text.trim())\n    .filter((text) => text);\n\nconst getTextInBrackets = (item: string) =>\n  item.slice(item.indexOf('[') + 1, item.lastIndexOf(']'));\n\nconst getTextInFinalParentheses = (item: string) =>\n  item.slice(item.lastIndexOf('(') + 1, item.lastIndexOf(')'));\n\nexport const extractNamesAndUrls = (inputText: string): ImageData[] =>\n  getArrayOfMarkdownLinks(inputText).map((text) => ({\n    imageName: getTextInBrackets(text),\n    url: getTextInFinalParentheses(text),\n  }));\n","import { useState } from 'react';\nimport styled from 'styled-components';\nimport { DropZone } from './components/DropZone';\nimport { Col, Row, ColSpacer } from './components/Grid';\nimport { HowTo } from './components/HowTo';\nimport { Input } from './components/Input';\nimport { device, margin } from './styles';\nimport { extractNamesAndUrls, ImageData } from './utils/parsing';\n\nconst BodyContainer = styled.div`\n  display: block;\n  margin: ${margin.phone};\n  text-align: center;\n\n  @media ${device.forTabletPortraitUp} {\n    margin: ${margin.tablet};\n  }\n\n  @media ${device.forDesktopUp} {\n    margin: ${margin.desktop};\n  }\n`;\n\nconst App = () => {\n  const [images, setImages] = useState([] as ImageData[]);\n  const [output, setOutput] = useState('');\n\n  const handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setImages(extractNamesAndUrls(e.target.value));\n  };\n\n  return (\n    <div className=\"App\">\n      <BodyContainer>\n        <Row>\n          <Col>\n            <Input\n              placeholder=\"Paste Github image links here\"\n              onChange={handleInput}\n            />\n          </Col>\n          <ColSpacer />\n          <Col>\n            <Input\n              placeholder=\"Markdown output appears here\"\n              value={output}\n              readOnly\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <DropZone images={images} onButtonClick={setOutput} />\n          </Col>\n        </Row>\n        <Row>\n          <HowTo />\n        </Row>\n      </BodyContainer>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}